import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class AlbumsDao { // 4
	String driver = "oracle.jdbc.driver.OracleDriver";
	String url = "jdbc:oracle:thin:@localhost:1521:orcl";
	String id = "sqlid";
	String pw = "sqlpw";
	Connection conn = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	
	public void Albumsdao(){ 
		try {
			Class.forName(driver);
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

	}
	public void getConnect() {
		try {
			conn = DriverManager.getConnection(url,id,pw);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public ArrayList<AlbumsBean> getAllAlbums(){ // 7
		getConnect();
		ArrayList<AlbumsBean> lists = new ArrayList<AlbumsBean>();
		try {
			String sql = "select * from albums order by num asc";
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while(rs.next()) {
				int num = rs.getInt("num");
				String song = rs.getString("song");
				String singer = rs.getString("singer");
				String company = rs.getString("company");
				int price = rs.getInt("price");
				String pub_day = String.valueOf(rs.getDate("pub_day"));
				
				AlbumsBean ab = new AlbumsBean();
				
				ab.setNum(num);
				ab.setSong(song);
				ab.setSinger(singer);
				ab.setCompany(company);
				ab.setPrice(price);
				ab.setPub_day(pub_day);
				
				lists.add(ab);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ps != null)
					ps.close();
				if(rs != null)
					rs.close();
				if(conn != null)
					conn.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
		return lists;
	} // getAllAlbums
	
	public ArrayList<AlbumsBean> getAlbumBySearch(String column,String search_word){
		getConnect();
		ArrayList<AlbumsBean> lists = new ArrayList<AlbumsBean>();
		try {
			String sql = "select * from albums where lower ("+column+ ") like lower (?)";
			ps = conn.prepareStatement(sql);
			ps.setString(1, "%" +search_word+ "%");
			rs = ps.executeQuery();
			
			while(rs.next()) {
				int num = rs.getInt("num");
				String song = rs.getString("song");
				String singer = rs.getString("singer");
				String company = rs.getString("company");
				int price = rs.getInt("price");
				String pub_day = String.valueOf(rs.getDate("pub_day"));
				
				AlbumsBean ab = new AlbumsBean();
				
				ab.setNum(num);
				ab.setSong(song);
				ab.setSinger(singer);
				ab.setCompany(company);
				ab.setPrice(price);
				ab.setPub_day(pub_day);
				
				lists.add(ab);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ps != null)
					ps.close();
				if(rs != null)
					rs.close();
				if(conn != null)
					conn.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
		return lists;
	} // getAlbumBySearch
	
	public ArrayList<AlbumsBean> getAlbumByRange(int from, int to) {
		getConnect();
		ArrayList<AlbumsBean> lists = new ArrayList<AlbumsBean>();
		try {
			String sql = "select num, song, singer, company, price, pub_day, rank"
					+ " from (select num, song, singer, company, price, pub_day, rank() over(order by price desc) as rank from albums)"
					+ " where rank between ? and ?";
			ps = conn.prepareStatement(sql);
			ps.setInt(1, from);
			ps.setInt(2, to);
			rs = ps.executeQuery();
			
			while(rs.next()) {
				int num = rs.getInt("num");
				String song = rs.getString("song");
				String singer = rs.getString("singer");
				String company = rs.getString("company");
				int price = rs.getInt("price");
				String pub_day = String.valueOf(rs.getDate("pub_day"));
				int rank = rs.getInt("rank");
				
				AlbumsBean ab = new AlbumsBean();
				
				ab.setNum(num);
				ab.setSong(song);
				ab.setSinger(singer);
				ab.setCompany(company);
				ab.setPrice(price);
				ab.setPub_day(pub_day);
				ab.setRank(rank);
				
				lists.add(ab);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ps != null)
					ps.close();
				if(rs != null)
					rs.close();
				if(conn != null)
					conn.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
		return lists;
	} // getAlbumByRange
	
	public void insertAlbum(String song, String singer, String company, int price, String pub_day) {
		getConnect();
		int cnt = -1;
		try {
			String sql = "insert into albums values (albumseq.nextval,?,?,?,?,?)";
			ps = conn.prepareStatement(sql);
			ps.setString(1, song);
			ps.setString(2, singer);
			ps.setString(3, company);
			ps.setInt(4, price);
			ps.setString(5, pub_day);
			cnt = ps.executeUpdate();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ps != null)
					ps.close();
				if(conn != null)
					conn.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
	} // insertAlbum
	public void updateAlbums(AlbumsBean ab) {
		getConnect();
		int cnt = -1;
		try {
			String sql = "update albums set song=?, singer=?, company=?, price=?, pub_day=? where num=?";
			ps = conn.prepareStatement(sql);
			ps.setString(1, ab.getSong());
			ps.setString(2, ab.getSinger());
			ps.setString(3, ab.getCompany());
			ps.setInt(4, ab.getPrice());
			ps.setString(5, ab.getPub_day());
			ps.setInt(6, ab.getNum());
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ps != null)
					ps.close();
				if(conn != null)
					conn.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
	} // updateAlbums
	
	public void deleteAlbum(int num) {
		getConnect();
		try {
			String sql = "delete from albums where num=?";
			ps = conn.prepareStatement(sql);
			ps.setInt(1, num);
			ps.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ps != null)
					ps.close();
				if(conn != null)
					conn.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
	} // deleteAlbum
	
	public ArrayList<AlbumsBean> align(String column, int align_way){
		ArrayList<AlbumsBean> lists = new ArrayList<AlbumsBean>();
		getConnect();
		String sql = ""
		
		return lists;
	}
}



